function REST_variable(a, b) {
    this.data = !1, this.url = a;
    var c = !1, d = this;
    b = "undefined" != typeof b ? b : {}, this.options = REST_helpers.option(b, {
        readOnCreated: !0,
        successGetHeader: 200,
        successPostHeader: 201,
        successDeleteHeader: 204,
        successPutHeader: 200,
        name: a,
        get: function() {
            REST_ajax.get(a, function(a) {
                d.data = a, c ? REST_notifyer.emitUpdate(d.options.name) : (c = !0, REST_notifyer.emitLoaded(d.options.name));
            }, d.options.successGetHeader, function() {
                d.options.getError();
            });
        },
        "delete": function() {
            console.error("Simple variables cant be deleted or added by default");
        },
        add: function() {
            console.error("Simple variables cant be deleted or added by default");
        },
        update: function(b) {
            REST_ajax.put(a, function() {
                d.data = b, REST_notifyer.emitUpdate(d.options.name);
            }, {
                data: b
            }, d.options.successPutHeader, function(a) {
                d.options.updateError(a);
            });
        },
        getError: function(a) {
            console.error("REST GET ERROR"), console.error(a);
        },
        addError: function(a) {
            console.error("REST ADD ERROR"), console.error(a);
        },
        deleteError: function(a) {
            console.error("REST DELETE ERROR"), console.error(a);
        },
        updateError: function(a) {
            console.error("REST UPDATE ERROR"), console.error(a);
        }
    }), this.get = function() {
        this.options.get();
    }, this["delete"] = function() {
        this.options["delete"]();
    }, this.update = function(a) {
        this.options.update(a);
    }, this.add = function(a) {
        this.options.add(a);
    }, this.options.readOnCreated && this.options.get();
}

var REST_ajax = {
    get: function(a, b, c, d) {
        var e = this.helpers.getRequestObject();
        e.onreadystatechange = function() {
            4 == e.readyState && e.status == c ? b(e.response) : 4 == e.readyState && d(e);
        }, e.open("GET", a, !0), e.send();
    },
    post: function(a, b, c, d, e) {
        var f = this.helpers.getRequestObject();
        f.onreadystatechange = function() {
            4 == f.readyState && f.status == d ? b(f.response) : 4 == f.readyState && e(f);
        }, f.open("POST", a, !0), f.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), 
        f.send(this.helpers.toQueryString(c));
    },
    put: function(a, b, c, d, e) {
        var f = this.helpers.getRequestObject();
        f.onreadystatechange = function() {
            4 == f.readyState && f.status == d ? b(f.response) : 4 == f.readyState && e(f);
        }, f.open("POST", a, !0), f.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), 
        c._METHOD = "PUT", f.send(this.helpers.toQueryString(c));
    },
    "delete": function(a, b, c, d) {
        var e = this.helpers.getRequestObject();
        e.onreadystatechange = function() {
            4 == e.readyState && e.status == c ? b(e.response) : 4 == e.readyState && d(e);
        }, e.open("DELETE", a, !0), e.send();
    },
    helpers: {
        getRequestObject: function() {
            var a;
            return a = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
        },
        toQueryString: function(a, b) {
            function c(a, b) {
                var d = [];
                return b = b || [], Object.keys(a).forEach(function(e) {
                    if (a.hasOwnProperty(e)) {
                        var f = b.slice();
                        f.push(e);
                        var g = [];
                        "object" == typeof a[e] ? g = c(a[e], f) : g.push({
                            path: f,
                            val: a[e]
                        }), g.forEach(function(a) {
                            return d.push(a);
                        });
                    }
                }), d;
            }
            var d = c(a);
            d = d.map(function(a) {
                if (1 == a.path.length) a.path = a.path[0]; else {
                    var b = a.path[0], c = a.path.slice(1);
                    a.path = b + "[" + c.join("][") + "]";
                }
                return a;
            });
            var e = d.map(function(a) {
                return a.path + "=" + a.val;
            }).join("&");
            return b ? encodeURIComponent(e) : e;
        }
    }
}, REST_helpers = {
    option: function(a, b) {
        for (var c in a) b[c] = a[c];
        return b;
    }
}, REST_notifyer = {
    funcLoaded: {},
    funcUpdate: {},
    funcAdd: {},
    funcDelete: {},
    onLoaded: function(a, b) {
        this.funcLoaded[a] ? this.funcLoaded[a].push(b) : this.funcLoaded[a] = [ b ];
    },
    onUpdate: function(a, b) {
        this.funcUpdate[a] ? this.funcUpdate[a].push(b) : this.funcUpdate[a] = [ b ];
    },
    onAdd: function(a, b) {
        this.funcAdd[a] ? this.funcAdd[a].push(b) : this.funcAdd[a] = [ b ];
    },
    onDelete: function(a, b) {
        this.funcDelete[a] ? this.funcDelete[a].push(b) : this.funcDelete[a] = [ b ];
    },
    emitLoaded: function(a) {
        if (this.funcLoaded[a]) for (var b = 0; b < this.funcLoaded[a].length; b++) this.funcLoaded[a][b]();
    },
    emitUpdate: function(a, b) {
        if (this.funcUpdate[a]) for (var c = 0; c < this.funcUpdate[a].length; c++) this.funcUpdate[a][c](b);
    },
    emitAdd: function(a, b) {
        if (this.funcAdd[a]) for (var c = 0; c < this.funcAdd[a].length; c++) this.funcAdd[a][c](b);
    },
    emitDelete: function(a, b) {
        if (this.funcDelete[a]) for (var c = 0; c < this.funcDelete[a].length; c++) this.funcDelete[a][c](b);
    }
}, REST = {};